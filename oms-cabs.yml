_include:
  - (quartical)stimela_cabs.yaml[optional]
  - (cubical)stimela/stimela_cabs.yaml[optional]

## this augments the standard 'cabs' config section
cabs:
  wsclean:
    image: ''
    command: /home/oms/src/wsclean/build/wsclean
    inputs:
      subtract-model:
        dtype: bool
        default: false
      taper-inner-tukey:
        dtype: float
      minuv-l:
        dtype: float
      maxuv-l:
        dtype: float
      minuvw-m:
        dtype: float
      maxuvw-m:
        dtype: float

  dummy:
    image: ''
    command: echo
    inputs:
      args:
        dtype: List[str]
        policies:
          positional: true
          repeat: repeat

  wsclean_pol:
    policies:
      skip_implicits: true
    image: ''
    command: /home/oms/src/wsclean/build/wsclean

  mkdir:
    command: mkdir
    inputs:
      dir:
        dtype: str
        policies:
          positional: true

  mv:
    command: mv
    policies:
      positional: true
    inputs:
      src:
        dtype: File
        required: true
    outputs:  
      dest:
          dtype: Union[File, Directory]
          required: true

  cp:
    command: cp -a
    policies:
      positional: true
    inputs:
      src:
        dtype: File
        required: true
    outputs:
      dest:
        dtype: Union[File, Directory]
        required: true

  print_uniq_column_values:
    command: "python3 -c 'from casacore.tables import table; import sys; print(len(set(table(sys.argv[1]).getcol(sys.argv[2]))),sys.argv[3]);'"
    policies:
      positional: true
    inputs:
      ms:
        dtype: MS
        required: true
      column:
        default: 'TIME'
      label:
        default: 'timeslots'

  stack_freq_cube:
    command: fitstool.py
    inputs:
      images:
        dtype: List[File]
        required: true
        policies:
          positional: true
          repeat: repeat
    outputs:
      cube:
        dtype: File
        policies:
          positional: true
          format: '--stack={0}:FREQ'

  fitstool:
    command: fitstool.py
    inputs:
      images:
        dtype: List[File]
        required: true
        policies:
          positional: true
          repeat: repeat
      mean:
        dtype: bool
      diff:
        dtype: bool
      force:
        dtype: bool
        default: true
    outputs:
      output:
        dtype: File

  pybdsm:
    name: pybdsm
    command: |
      import sys
      import bdsf as bdsm

      # these arguments belong to write_catalog() -- this gives their names -- the rest are used by process_image()
      WRITE_CATALOG_ARGS = dict(outfile='outfile', catalog_type='catalog_type', catalog_format='format')

      # enforce type conversions
      ARG_TYPES = dict(rms_box=tuple)

      # form args for process_image
      process_image_args = dict(
          print_timing=True,
          quiet=True,
          # for some reason process_image locks up unless this is set to True. Something to do with the progress bar filling up buffers on stdout?
          #verbose_fitting=True,
      )
      for arg, value in args.items():
          if arg not in WRITE_CATALOG_ARGS and arg != 'image':
              if arg in ARG_TYPES:
                  value = ARG_TYPES[arg](value)
              process_image_args[arg] = value

      # form args for write_catalog
      write_catalog_args = dict(clobber=True)
      for arg, value in args.items():
          if arg in WRITE_CATALOG_ARGS:
              if arg in ARG_TYPES:
                  value = ARG_TYPES[arg](value)
              write_catalog_args[WRITE_CATALOG_ARGS[arg]] = value

      print(f"process_image arguments: {args['image']} {process_image_args}")
      sys.stdout.flush()
      print(f"write_catalog arguments: {write_catalog_args}")
      sys.stdout.flush()

      print(f"calling process_image")
      sys.stdout.flush()
      img = bdsm.process_image(args['image'], **process_image_args)

      print(f"calling write_catalog")
      sys.stdout.flush()
      img.write_catalog(**write_catalog_args)

      print(f"finished")
      sys.stdout.flush()

    flavour:
      kind: python-code
      input_vars: false
      input_dict: args
    inputs:
      image:
        dtype: File
      spectralindex_do:
        dtype: bool
        default: false
      flagging_opts:
        dtype: bool
        default: false
      flag_maxsize_bm:
        dtype: float
        required: false
      rms_box:
        required: false
        dtype: Tuple[int, int]
      thresh_isl:
        dtype: float
        default: 3
      thresh_pix:
        dtype: float
        default: 5
      catalog_type:
        choices: [srl, gaul, shap]
        default: srl
      catalog_format:
        choices: [bbs, ds9, fits, star, kvis, ascii, csv, casabox, sagecal]
        default: ascii
      rms_map:
        dtype: bool
        required: false
    outputs:
      outfile:
        dtype: File


  tigger_convert:
    command: tigger-convert
    inputs:
      src:
        dtype: File
        required: true
        policies:
          positional: true
      force:
        dtype: bool
        default: true
    outputs:
      dest:
        dtype: File
        policies:
          positional: true

  crystalball:
    command: crystalball
    virtual_env: ~/.venv/cball
    policies:
      prefix: '--'
      replace: {'_': '-'}
    inputs:
      ms:
        dtype: MS
        writable: true
        required: true
        policies:
          positional: true
      output_column:
        dtype: str
        required: true
      sky_model:
        dtype: File
        required: true
      within:
        dtype: File
      num_sources:
        dtype: int

  breizorro:
    command: breizorro
    policies:
      replace: {'_': '-'}
    inputs:
      restored_image:
        dtype: File
      mask_image:
        dtype: File
      merge:
        dtype: Union[str, List[str]]
      subtract:
        dtype: Union[str, List[str]]
      threshold:
        dtype: float
        default: 6.5
      dilate:
        dtype: int
      number_islands:
        dtype: bool
      extract_islands:
        dtype: List[str]
        policies:
          repeat: list
      remove_islands:
        dtype: List[str]
        policies:
          repeat: list
      invert:
        dtype: bool
      make_binary:
        dtype: bool
    outputs:
      mask:
        dtype: File
        nom_de_guerre: outfile
        required: true 

  taql_update:
    command: "taql update"
    policies:
      positional: true
    inputs:
      ms:
        dtype: MS
        required: true
      commands:
        dtype: List[str]
        policies:
          repeat: list


  flagman:
    command: flagmanager
    flavour: casa-task
    inputs:
      ms: 
        dtype: MS
        required: true
        nom_de_guerre: vis
      versionname:
        info: "flag version name"
      mode: 
        choices: [save, restore, list]
        required: true

  flagsummary:
    command: flagdata
    flavour: casa-task
    inputs:
      ms: 
        dtype: MS
        required: true
        nom_de_guerre: vis
      spw:
        dtype: str
        default: all
      mode:
        implicit: 'summary'
    outputs:
      percentage:
        dtype: float
    management:
      wranglers:
        'Total Flagged: .* Total Counts: .* \((?P<percentage>[\d.]+)%\)':
          - PARSE_OUTPUT:percentage:float
          - HIGHLIGHT:bold green

  msutils.copycol:
    flavour: python
    command: MSUtils.msutils.copycol
    inputs:
      msname: 
        dtype: MS
        required: true
      fromcol:
        dtype: str
        required: true
      tocol:
        dtype: str
        required: true

  msutils.addcol:
    flavour: python
    command: MSUtils.msutils.addcol
    inputs:
      msname: 
        dtype: MS
        required: true
      colname:
        dtype: str
        required: true

  smops:
    command: smops --ms {current.ms}
    policies:
      prefix: '--'
    inputs:
      output-prefix:
        dtype: str
        required: true
      num-threads:
        dtype: int
      stokes:
        dtype: str
        default: I
      ms:
        dtype: MS
        policies:
          skip: true
      input-prefix:
        required: true
        dtype: str
      channels-out:
        required: true
        dtype: int
      polynomial-order:
        dtype: int
        required: true

    outputs:
      model:
        dtype: List[File]
        implicit: =GLOB("{current.output-prefix}*model*fits")

  tricolour:
    command: tricolour
    inputs:
      ms:
        dtype: MS
        policies:
          positional: true
      config:
        dtype: File
      ignore-flags:
        dtype: bool
      flagging-strategy:
        choices: [standard,polarisation,total_power]
      row-chunks:
        dtype: int
      baseline-chunks:
        dtype: int
      nworkers:
        dtype: int
      dilate-masks:
        dtype: Union[int,str]
      data-column:
        dtype: str
      field-names:
        dtype: str
      scan_numbers:
        dtype: str
      disable-post-mortem:
        dtype: bool
        default: true
      window-backend:
        choices: [numpy, zarr-disk]
      temporary-directory:
        dtype: Directory
      subtract-model-column:
        dtype: str

lib:
  steps:
    wsclean:
      base:
        info: "base wsclean settings"
        cab: wsclean
        params:
          padding: 1.3
          nwlayers-factor: 3
          use-wgridder: true
          log-time: true

      dirty:
        _use: lib.steps.wsclean.base
        info: "wsclean step for dirty-only image"
        params:
          column: CORRECTED_DATA
          niter: 0
          # parallel_gridding: 64

      dirty_pol:
        _use: lib.steps.wsclean.dirty
        info: "wsclean step for dirty-only IQUV image"
        cab: wsclean_pol
        params:
          pol: IQUV

      image:
        _use: lib.steps.wsclean.dirty
        info: "wsclean step for imaging"
        params:
          fit-beam: true
          elliptical-beam: true
#          parallel-deconvolution: 1500
          join-channels: true
          mgain: 0.9

      image_pol:
        _use: lib.steps.wsclean.image
        info: "wsclean step for IQUV imaging"
        cab: wsclean_pol
        params:
          join-polarizations: true
          fit-spectral-pol: =UNSET
          pol: IQUV
          mgain: 0.9

      predict:
        _use: lib.steps.wsclean.base
        info: "wsclean step for predicting a model"
        params:
          predict: true

      predict_pol:
        _use: lib.steps.wsclean.predict
        info: "wsclean step for predicting an IQUV model"
        cab: wsclean_pol
        params:
          predict: true
          pol: IQUV

      predict_pol2:
        _use: lib.steps.wsclean.predict_pol
        info: "wsclean step for predicting an IQ model"
        params:
          pol: IQUV


    quartical:
      base:
        cab: quartical
        params:
          input_ms:
            time_chunk: '16'
            freq_chunk: '0'
            group_by: [SCAN_NUMBER,FIELD_ID,DATA_DESC_ID]
            select_uv_range: [150, 0]
            select_corr: [0, 3]
          input_model:
            apply_p_jones: false
          solver:
            terms: [K]
            iter_recipe: [25]
            propagate_flags: true
            robust: false
          output:
            overwrite: true
            products: [corrected_data]
            columns: [CORRECTED_DATA]
            flags: true
            apply_p_jones_inv: false
          mad_flags:
            enable: true
            threshold_bl: 5
            threshold_global: 5
            max_deviation: 5
          K:
            time_interval: 1
            freq_interval: 0
            type: delay



